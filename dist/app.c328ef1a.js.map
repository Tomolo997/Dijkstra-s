{"version":3,"sources":["app.js"],"names":["container","document","querySelector","console","log","nodes","COLS","ROWS","grid","i","j","div","createElement","setAttribute","push","name","row","col","isWall","isVisited","tentativeDistance","Infinity","previousNode","classList","add","append","init","setStartingPoint","rows","cols","startingNode","find","el","setEndingPoint","endingNode","mouseisDown","window","onmousedown","drawWall","onmouseup","mouseDraw","forEach","addEventListener","e","contains","target","endPoint","startingPoins","startNo","endNo","draggable","nodesDrag","querySelectorAll","tpdragged","event","remove","style","opacity","preventDefault","className","background","dataset","Number","findNeighbour","currentNode","neighbours","filter","undefined","dijkstra","endNode","visitedNodes","UNVisitedNodes","length","sortNodes","closestNode","shift","updateNeighbours","start","animateDijs","unvisitedNodes","sort","a","b","unvisitedNeigh","neighbour","getNodesInShortestPath","startNode","nodesShoretes","unshift","setTimeout","element","shortestPath"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["//select a container\r\n\r\nconst container = document.querySelector('.container');\r\nconsole.log(container);\r\n//make a grid\r\nexport const nodes = [];\r\nconst COLS = 40;\r\nconst ROWS = 40;\r\nfunction grid() {\r\n  for (let i = 0; i < ROWS; i++) {\r\n    for (let j = 0; j < COLS; j++) {\r\n      const div = document.createElement('div');\r\n      div.setAttribute('data-row', i);\r\n      div.setAttribute('data-col', j);\r\n      nodes.push({\r\n        name: div,\r\n        row: i,\r\n        col: j,\r\n        isWall: false,\r\n        isVisited: false,\r\n        tentativeDistance: Infinity,\r\n        previousNode: null,\r\n      });\r\n      div.classList.add('node');\r\n      container.append(div);\r\n    }\r\n  }\r\n}\r\nfunction init() {\r\n  grid();\r\n  //return\r\n}\r\ninit();\r\nfunction setStartingPoint(rows, cols) {\r\n  const startingNode = nodes.find((el) => el.row === rows && el.col === cols);\r\n  startingNode.name.classList.add('startingNode');\r\n  return startingNode;\r\n}\r\n\r\nfunction setEndingPoint(rows, cols) {\r\n  const endingNode = nodes.find((el) => el.row === rows && el.col === cols);\r\n  endingNode.name.classList.add('endingNode');\r\n  endingNode.endingNode = true;\r\n  return endingNode;\r\n}\r\n\r\n//when i click the node it must log\r\nlet mouseisDown = false;\r\nwindow.onmousedown = function () {\r\n  mouseisDown = true;\r\n  console.log(mouseisDown);\r\n  drawWall();\r\n};\r\nwindow.onmouseup = function () {\r\n  if (mouseisDown) {\r\n    mouseisDown = false;\r\n  } else {\r\n    mouseisDown = true;\r\n  }\r\n  console.log(mouseisDown);\r\n};\r\n\r\nfunction mouseDraw() {\r\n  if (mouseisDown) {\r\n    nodes.forEach((el) =>\r\n      el.name.addEventListener('mousemove', function (e) {\r\n        if (\r\n          mouseisDown &&\r\n          !el.name.classList.contains('startingNode') &&\r\n          !el.name.classList.contains('endingNode')\r\n        ) {\r\n          e.target.classList.add('wall');\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\nfunction drawWall() {\r\n  mouseDraw();\r\n}\r\n\r\n//djkstra Algo\r\n// const t = setInterval(() => {\r\n//   nodes.forEach((el) => (el.name.style.backgroundColor = 'blue'));\r\n// }, 100);\r\n\r\n//iterate skozi vse neighboure in jih pobarvaj rdeco\r\n\r\nlet endPoint = setEndingPoint(30, 25);\r\nlet startingPoins = setStartingPoint(3, 3);\r\n\r\n//select the current staring point\r\n\r\n//plan\r\n//select the staringNodePosition\r\nconst startNo = document.querySelector('.startingNode');\r\nconst endNo = document.querySelector('.endingNode');\r\nstartNo.draggable = true;\r\nendNo.draggable = true;\r\nconst nodesDrag = document.querySelectorAll('.node');\r\nnodesDrag.forEach((el) => (el.draggable = false));\r\nlet tpdragged;\r\nstartNo.addEventListener('drag', function (event) {}, false);\r\nendNo.addEventListener('drag', function (event) {}, false);\r\ndocument.addEventListener(\r\n  'dragstart',\r\n  function (event) {\r\n    // store a ref. on the dragged elem\r\n\r\n    tpdragged = event.target;\r\n    if (event.target.classList.contains('startingNode')) {\r\n      event.target.classList.remove('startingNode');\r\n    } else if (event.target.classList.contains('endingNode')) {\r\n      event.target.classList.remove('endingNode');\r\n    }\r\n\r\n    console.log(tpdragged.classList);\r\n    // make it half transparent\r\n  },\r\n  false\r\n);\r\n\r\ndocument.addEventListener(\r\n  'dragend',\r\n  function (event) {\r\n    // reset the transparency\r\n    event.target.style.opacity = '';\r\n  },\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragover',\r\n  function (event) {\r\n    // prevent default to allow drop\r\n    event.preventDefault();\r\n  },\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragenter',\r\n  function (event) {\r\n    // highlight potential drop target when the draggable element enters it\r\n    if (event.target.className == 'node') {\r\n      event.target.style.background = 'grey';\r\n    }\r\n  },\r\n\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragleave',\r\n  function (event) {\r\n    // reset background of potential drop target when the draggable element leaves it\r\n    if (event.target.className == 'node') {\r\n      event.target.style.background = '';\r\n    }\r\n  },\r\n  false\r\n);\r\n\r\ndocument.addEventListener(\r\n  'drop',\r\n  function (event) {\r\n    // prevent default action (open as link for some elements)\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n\r\n    // move dragged elem to the selected drop target\r\n    if (event.target.className == 'node') {\r\n      if (!nodes.find((el) => el.name.classList.contains('startingNode'))) {\r\n        event.target.style.background = '';\r\n        console.log(event.target.dataset.row, event.target.dataset.col);\r\n        startingPoins = setStartingPoint(\r\n          Number(event.target.dataset.row),\r\n          Number(event.target.dataset.col)\r\n        );\r\n      } else {\r\n        endPoint = setEndingPoint(\r\n          Number(event.target.dataset.row),\r\n          Number(event.target.dataset.col)\r\n        );\r\n      }\r\n      mouseisDown = false;\r\n    }\r\n  },\r\n  false\r\n);\r\n// startNo.addEventListener(\r\n//   'dragend',\r\n//   function (event) {\r\n//     console.log(tpdragged);\r\n//     tpdragged.name.classList.add('startingNode');\r\n//   },\r\n//   false\r\n// );\r\n\r\n//find neighbbour\r\n\r\nfunction findNeighbour(currentNode) {\r\n  const neighbours = [];\r\n  const { row, col } = currentNode;\r\n\r\n  //najdemo leve, desne neighgboure v nodes !\r\n\r\n  neighbours.push(nodes.find((el) => el.row === row - 1 && el.col === col));\r\n  neighbours.push(nodes.find((el) => el.row === row + 1 && el.col === col));\r\n  neighbours.push(nodes.find((el) => el.row === row && el.col === col - 1));\r\n  neighbours.push(nodes.find((el) => el.row === row && el.col === col + 1));\r\n  return neighbours\r\n    .filter((el) => el !== undefined)\r\n    .filter((el) => (el.isVisited = true));\r\n}\r\n\r\nfunction dijkstra(grid, startingNode, endNode) {\r\n  const visitedNodes = [];\r\n  startingNode.tentativeDistance = 0;\r\n  const UNVisitedNodes = grid;\r\n\r\n  //dokler ni prazna !\r\n  while (!!UNVisitedNodes.length) {\r\n    //sortamo node po distance => 0 gre na začetek za začetek, tako dobimo starting node kak začetek\r\n    sortNodes(UNVisitedNodes);\r\n    const closestNode = UNVisitedNodes.shift();\r\n    closestNode.isVisited = true;\r\n\r\n    //dodamo wall ==>\r\n    if (closestNode.name.classList.contains('wall')) continue;\r\n    //če je closest node enak end nodu potem je SUCCSESS\r\n    // če se zaleti in nima več ven\r\n    if (closestNode.tentativeDistance === Infinity) {\r\n      return visitedNodes;\r\n    }\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === endNode) return visitedNodes;\r\n    //updejtamo neighboure\r\n    updateNeighbours(closestNode, nodes);\r\n  }\r\n}\r\n\r\nconst start = document.querySelector('.startDijsktra');\r\n\r\nstart.addEventListener('click', function (e) {\r\n  animateDijs();\r\n});\r\n\r\n//sortamo node, da dobimo 0 na začetku !\r\nfunction sortNodes(unvisitedNodes) {\r\n  unvisitedNodes.sort((a, b) => a.tentativeDistance - b.tentativeDistance);\r\n}\r\n\r\nfunction updateNeighbours(closestNode, grid) {\r\n  const unvisitedNeigh = findNeighbour(closestNode, grid);\r\n  for (const neighbour of unvisitedNeigh) {\r\n    neighbour.tentativeDistance = closestNode.tentativeDistance + 1;\r\n    neighbour.previousNode = closestNode;\r\n  }\r\n}\r\n\r\n//returnati moramo shortest path =>\r\nfunction getNodesInShortestPath(startNode) {\r\n  const nodesShoretes = [];\r\n  let currentNode = startNode;\r\n  while (currentNode !== null) {\r\n    //dodamo na začezek\r\n    nodesShoretes.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return nodesShoretes;\r\n}\r\n\r\n//TO DO\r\n//1. [OK] animate the neighbouring nodes that appear\r\n//2. animate the shortest path\r\n//3. get starting and ending node to appear any where\r\n\r\n//1.Animate the neighboiuzrs nodest that appear\r\nfunction animateDijs() {\r\n  const visitedNodes = dijkstra(nodes, startingPoins, endPoint);\r\n  //dijsktra returna vse visited nodese\r\n  //loopamo skozi vsakega in mu dodamo class listo visited z delajom\r\n  for (let i = 0; i < visitedNodes.length; i++) {\r\n    setTimeout(() => {\r\n      const element = visitedNodes[i];\r\n      element.name.classList.add('visited');\r\n    }, 10 * i);\r\n  }\r\n\r\n  const shortestPath = getNodesInShortestPath(endPoint);\r\n  setTimeout(() => {\r\n    for (let i = shortestPath.length - 1; i >= 0; i--) {\r\n      setTimeout(() => {\r\n        const element = shortestPath[i];\r\n        element.name.classList.add('shoretstPath');\r\n      }, 50 * i);\r\n    }\r\n  }, 10 * visitedNodes.length);\r\n}\r\n"]}