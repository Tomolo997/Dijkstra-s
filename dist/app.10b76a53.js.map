{"version":3,"sources":["app.js"],"names":["container","document","querySelector","console","log","nodes","COLS","ROWS","grid","i","j","div","createElement","setAttribute","push","name","row","col","isWall","isVisited","tentativeDistance","Infinity","previousNode","classList","add","append","init","setStartingPoint","rows","cols","startingNode","find","el","setEndingPoint","endingNode","mouseisDown","mouseDraw","forEach","addEventListener","e","contains","target","drawWall","window","onmousedown","onmouseup","endPoint","startingPoins","startNo","endNo","draggable","tpdragged","nodesDrag","querySelectorAll","findNeighbour","currentNode","neighbours","filter","undefined","dijkstra","endNode","visitedNodes","UNVisitedNodes","length","sortNodes","closestNode","shift","updateNeighbours","event","remove","style","opacity","preventDefault","className","background","Number","dataset","start","unvisitedNodes","sort","a","b","unvisitedNeigh","neighbour","getNodesInShortestPath","startNode","nodesShoretes","unshift","animateDijs","setTimeout","shortestPath"],"mappings":"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","file":"app.10b76a53.js","sourceRoot":"..","sourcesContent":["//select a container\r\n\r\nconst container = document.querySelector('.container');\r\nconsole.log(container);\r\n//make a grid\r\nexport const nodes = [];\r\nconst COLS = 40;\r\nconst ROWS = 40;\r\nfunction grid() {\r\n  for (let i = 0; i < ROWS; i++) {\r\n    for (let j = 0; j < COLS; j++) {\r\n      const div = document.createElement('div');\r\n      div.setAttribute('data-row', i);\r\n      div.setAttribute('data-col', j);\r\n      nodes.push({\r\n        name: div,\r\n        row: i,\r\n        col: j,\r\n        isWall: false,\r\n        isVisited: false,\r\n        tentativeDistance: Infinity,\r\n        previousNode: null,\r\n      });\r\n      div.classList.add('node');\r\n      container.append(div);\r\n    }\r\n  }\r\n}\r\nfunction init() {\r\n  grid();\r\n  //return\r\n}\r\ninit();\r\nfunction setStartingPoint(rows, cols) {\r\n  const startingNode = nodes.find((el) => el.row === rows && el.col === cols);\r\n  startingNode.name.classList.add('startingNode');\r\n  return startingNode;\r\n}\r\n\r\nfunction setEndingPoint(rows, cols) {\r\n  const endingNode = nodes.find((el) => el.row === rows && el.col === cols);\r\n  endingNode.name.classList.add('endingNode');\r\n  endingNode.endingNode = true;\r\n  return endingNode;\r\n}\r\n\r\n//when i click the node it must log\r\nlet mouseisDown = false;\r\nwindow.onmousedown = function () {\r\n  mouseisDown = true;\r\n  console.log(mouseisDown);\r\n  drawWall();\r\n};\r\nwindow.onmouseup = function () {\r\n  if (mouseisDown) {\r\n    mouseisDown = false;\r\n  } else {\r\n    mouseisDown = true;\r\n  }\r\n  console.log(mouseisDown);\r\n};\r\n\r\nfunction mouseDraw() {\r\n  if (mouseisDown) {\r\n    nodes.forEach((el) =>\r\n      el.name.addEventListener('mousemove', function (e) {\r\n        if (\r\n          mouseisDown &&\r\n          !el.name.classList.contains('startingNode') &&\r\n          !el.name.classList.contains('endingNode')\r\n        ) {\r\n          e.target.classList.add('wall');\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\nfunction drawWall() {\r\n  mouseDraw();\r\n}\r\n\r\n//djkstra Algo\r\n// const t = setInterval(() => {\r\n//   nodes.forEach((el) => (el.name.style.backgroundColor = 'blue'));\r\n// }, 100);\r\n\r\n//iterate skozi vse neighboure in jih pobarvaj rdeco\r\n\r\nlet endPoint = setEndingPoint(30, 25);\r\nlet startingPoins = setStartingPoint(3, 3);\r\n\r\n//select the current staring point\r\n\r\n//plan\r\n//select the staringNodePosition\r\nconst startNo = document.querySelector('.startingNode');\r\nconst endNo = document.querySelector('.endingNode');\r\nstartNo.draggable = true;\r\nendNo.draggable = true;\r\nconst nodesDrag = document.querySelectorAll('.node');\r\nnodesDrag.forEach((el) => (el.draggable = false));\r\nlet tpdragged;\r\nstartNo.addEventListener('drag', function (event) {}, false);\r\nendNo.addEventListener('drag', function (event) {}, false);\r\ndocument.addEventListener(\r\n  'dragstart',\r\n  function (event) {\r\n    // store a ref. on the dragged elem\r\n\r\n    tpdragged = event.target;\r\n    if (event.target.classList.contains('startingNode')) {\r\n      event.target.classList.remove('startingNode');\r\n    } else if (event.target.classList.contains('endingNode')) {\r\n      event.target.classList.remove('endingNode');\r\n    }\r\n\r\n    console.log(tpdragged.classList);\r\n    // make it half transparent\r\n  },\r\n  false\r\n);\r\n\r\ndocument.addEventListener(\r\n  'dragend',\r\n  function (event) {\r\n    // reset the transparency\r\n    event.target.style.opacity = '';\r\n  },\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragover',\r\n  function (event) {\r\n    // prevent default to allow drop\r\n    event.preventDefault();\r\n  },\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragenter',\r\n  function (event) {\r\n    // highlight potential drop target when the draggable element enters it\r\n    if (event.target.className == 'node') {\r\n      event.target.style.background = 'grey';\r\n    }\r\n  },\r\n\r\n  false\r\n);\r\ndocument.addEventListener(\r\n  'dragleave',\r\n  function (event) {\r\n    // reset background of potential drop target when the draggable element leaves it\r\n    if (event.target.className == 'node') {\r\n      event.target.style.background = '';\r\n    }\r\n  },\r\n  false\r\n);\r\n\r\ndocument.addEventListener(\r\n  'drop',\r\n  function (event) {\r\n    // prevent default action (open as link for some elements)\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n\r\n    // move dragged elem to the selected drop target\r\n    if (event.target.className == 'node') {\r\n      if (!nodes.find((el) => el.name.classList.contains('startingNode'))) {\r\n        event.target.style.background = '';\r\n        console.log(event.target.dataset.row, event.target.dataset.col);\r\n        startingPoins = setStartingPoint(\r\n          Number(event.target.dataset.row),\r\n          Number(event.target.dataset.col)\r\n        );\r\n      } else {\r\n        endPoint = setEndingPoint(\r\n          Number(event.target.dataset.row),\r\n          Number(event.target.dataset.col)\r\n        );\r\n      }\r\n      mouseisDown = false;\r\n    }\r\n  },\r\n  false\r\n);\r\n// startNo.addEventListener(\r\n//   'dragend',\r\n//   function (event) {\r\n//     console.log(tpdragged);\r\n//     tpdragged.name.classList.add('startingNode');\r\n//   },\r\n//   false\r\n// );\r\n\r\n//find neighbbour\r\n\r\nfunction findNeighbour(currentNode) {\r\n  const neighbours = [];\r\n  const { row, col } = currentNode;\r\n\r\n  //najdemo leve, desne neighgboure v nodes !\r\n\r\n  neighbours.push(nodes.find((el) => el.row === row - 1 && el.col === col));\r\n  neighbours.push(nodes.find((el) => el.row === row + 1 && el.col === col));\r\n  neighbours.push(nodes.find((el) => el.row === row && el.col === col - 1));\r\n  neighbours.push(nodes.find((el) => el.row === row && el.col === col + 1));\r\n  return neighbours\r\n    .filter((el) => el !== undefined)\r\n    .filter((el) => (el.isVisited = true));\r\n}\r\n\r\nfunction dijkstra(grid, startingNode, endNode) {\r\n  const visitedNodes = [];\r\n  startingNode.tentativeDistance = 0;\r\n  const UNVisitedNodes = grid;\r\n\r\n  //dokler ni prazna !\r\n  while (!!UNVisitedNodes.length) {\r\n    //sortamo node po distance => 0 gre na začetek za začetek, tako dobimo starting node kak začetek\r\n    sortNodes(UNVisitedNodes);\r\n    const closestNode = UNVisitedNodes.shift();\r\n    closestNode.isVisited = true;\r\n\r\n    //dodamo wall ==>\r\n    if (closestNode.name.classList.contains('wall')) continue;\r\n    //če je closest node enak end nodu potem je SUCCSESS\r\n    // če se zaleti in nima več ven\r\n    if (closestNode.tentativeDistance === Infinity) {\r\n      return visitedNodes;\r\n    }\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === endNode) return visitedNodes;\r\n    //updejtamo neighboure\r\n    updateNeighbours(closestNode, nodes);\r\n  }\r\n}\r\n\r\nconst start = document.querySelector('.startDijsktra');\r\n\r\nstart.addEventListener('click', function (e) {\r\n  animateDijs();\r\n});\r\n\r\n//sortamo node, da dobimo 0 na začetku !\r\nfunction sortNodes(unvisitedNodes) {\r\n  unvisitedNodes.sort((a, b) => a.tentativeDistance - b.tentativeDistance);\r\n}\r\n\r\nfunction updateNeighbours(closestNode, grid) {\r\n  const unvisitedNeigh = findNeighbour(closestNode, grid);\r\n  for (const neighbour of unvisitedNeigh) {\r\n    neighbour.tentativeDistance = closestNode.tentativeDistance + 1;\r\n    neighbour.previousNode = closestNode;\r\n  }\r\n}\r\n\r\n//returnati moramo shortest path =>\r\nfunction getNodesInShortestPath(startNode) {\r\n  const nodesShoretes = [];\r\n  let currentNode = startNode;\r\n  while (currentNode !== null) {\r\n    //dodamo na začezek\r\n    nodesShoretes.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n\r\n  return nodesShoretes;\r\n}\r\n\r\n//TO DO\r\n//1. [OK] animate the neighbouring nodes that appear\r\n//2. animate the shortest path\r\n//3. get starting and ending node to appear any where\r\n\r\n//1.Animate the neighboiuzrs nodest that appear\r\nfunction animateDijs() {\r\n  const visitedNodes = dijkstra(nodes, startingPoins, endPoint);\r\n  //dijsktra returna vse visited nodese\r\n  //loopamo skozi vsakega in mu dodamo class listo visited z delajom\r\n  for (let i = 0; i < visitedNodes.length; i++) {\r\n    setTimeout(() => {\r\n      const element = visitedNodes[i];\r\n      element.name.classList.add('visited');\r\n    }, 10 * i);\r\n  }\r\n\r\n  const shortestPath = getNodesInShortestPath(endPoint);\r\n  setTimeout(() => {\r\n    for (let i = shortestPath.length - 1; i >= 0; i--) {\r\n      setTimeout(() => {\r\n        const element = shortestPath[i];\r\n        element.name.classList.add('shoretstPath');\r\n      }, 50 * i);\r\n    }\r\n  }, 10 * visitedNodes.length);\r\n}\r\n"]}